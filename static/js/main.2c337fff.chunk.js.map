{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","chartData","setChartData","useEffect","rawd","data","axios","get","then","res","console","log","active","recovered","deaths","labels","datasets","label","backgroundColor","catch","err","chart","className","options","title","text","fontSize","legend","display","position","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yMA8FeA,EA1FH,WAAO,IAAD,EACkBC,mBAAS,IAD3B,mBACTC,EADS,KACEC,EADF,KAsClB,OAHAC,qBAAU,YA9BK,WACX,IAAIC,EAAK,GACLC,EAAK,GACTC,IACCC,IAAI,4DACJC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,EAAIJ,MAChBA,EAAKI,EAAIJ,KACTK,QAAQC,IAAIN,GACZD,EAAK,CAACK,EAAIJ,KAAKO,OAAOH,EAAIJ,KAAKQ,UAAUJ,EAAIJ,KAAKS,QAClDZ,EAAa,CACTa,OAAQ,CAAC,eAAe,iBAAiB,gBACzCC,SAAS,CACL,CACEC,MAAM,SACNZ,KAAKD,EACLc,gBAAgB,CACd,wBACA,wBACA,8BAMfC,OAAM,SAAAC,GACHV,QAAQC,IAAIS,MAEhBV,QAAQC,IAAIP,GAGZiB,KACF,IAEE,yBAAKC,UAAU,OACd,qDACG,6BACA,kBAAC,IAAD,CACEjB,KAAMJ,EACNsB,QAAS,CACPC,MAAM,CAEJC,KAAK,wBACLC,SAAS,IAEXC,OAAO,CACLC,SAAQ,EACRC,SAAS,YAIf,6BACA,kBAAC,IAAD,CACExB,KAAMJ,EACNsB,QAAS,CACPC,MAAM,CAEJC,KAAK,wBACLC,SAAS,IAEXC,OAAO,CACLC,SAAQ,EACRC,SAAS,YAIf,6BACA,kBAAC,IAAD,CACExB,KAAMJ,EACNsB,QAAS,CACPC,MAAM,CAEJC,KAAK,wBACLC,SAAS,IAEXC,OAAO,CACLC,SAAQ,EACRC,SAAS,eC1EHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdzB,OAAM,SAAA0B,GACLnC,QAAQmC,MAAMA,EAAMC,a","file":"static/js/main.2c337fff.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Pie, Bar ,Line} from \"react-chartjs-2\";\nimport axios from \"axios\";\n\nconst App = () => {\n  const [chartData, setChartData] = useState({});\n // const [employeeSalary, setEmployeeSalary] = useState([]);\n  //const [employeeAge, setEmployeeAge] = useState([]);\n\n  const chart =()=>{\n    let rawd=[];\n    let data={};\n    axios\n    .get(\"https://coronavirus-19-api.herokuapp.com/countries/INDIA\")\n    .then(res =>{\n        console.log(res.data);\n        data=res.data;\n        console.log(data);\n        rawd=[res.data.active,res.data.recovered,res.data.deaths]\n        setChartData({\n            labels: ['Active Cases','Recoverd cases','Total Deaths'],\n            datasets:[\n                {\n                  label:'People',\n                  data:rawd,\n                  backgroundColor:[\n                    'rgba(255, 51, 0, 0.6)',\n                    'rgba(0, 153, 51, 0.6)',\n                    'rgba(204, 0, 0,0.6)',\n                  ]\n                }\n              ]\n        });\n    })\n    .catch(err =>{\n        console.log(err);\n    });\n    console.log(rawd)\n}\nuseEffect(()=>{\n    chart();\n},[]);\nreturn(\n    <div className=\"App\">\n     <h1>Corona Cases In India</h1>\n        <div>\n        <Pie\n          data={chartData}\n          options={{\n            title:{\n              //display:this.props.displayTitle,\n              text:'CORONA CASES IN India',\n              fontSize:25\n            },\n            legend:{\n              display:true,\n              position:\"right\"\n            }\n          }}\n        />  \n        <br/>\n        <Bar\n          data={chartData}\n          options={{\n            title:{\n              //display:this.props.displayTitle,\n              text:'CORONA CASES IN India',\n              fontSize:25\n            },\n            legend:{\n              display:true,\n              position:\"right\"\n            }\n          }}\n        />  \n        <br />\n        <Line\n          data={chartData}\n          options={{\n            title:{\n              //display:this.props.displayTitle,\n              text:'CORONA CASES IN India',\n              fontSize:25\n            },\n            legend:{\n              display:true,\n              position:\"right\"\n            }\n          }}\n        />  \n        </div>   \n    </div>\n)\n        }\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}